#ifndef COLL_VERSION_VERSION_HXX
#define COLL_VERSION_VERSION_HXX
#include <string>

namespace ccol
{
    /**
     * \brief The version namespace contains functions that return version and build information.
     */
    namespace version
    {
        /**
         * \brief Gets the name of this library as a const char pointer.
         * \return Returns a const char pointer to name of this library.
         */
        const char* name_cstr()
        {
            return "@PROJECT_NAME@";
        }

        /**
         * \brief Gets the name of this library as a std::string.
         * \return Returns a std:string containing the name of this library.
         */
        std::string name()
        {
            return name_cstr();
        }

        /**
         * \brief Gets the build quality of this library as a const char pointer.
         * \return Returns a const char pointer to build quality of this library.
         */
        const char* build_quality_cstr()
        {
            return "@BUILD_QUALITY@";
        }


        /**
         * \brief Gets the build quality of this library as a std::string.
         * \return Returns a std::string containing the build quality of this library.
         */
        std::string build_quality()
        {
            return build_quality_cstr();
        }

        /**
         * \brief Gets the build date of this library as a const char pointer.
         * \return Returns a const char pointer to build date of this library.
         */
        const char* build_date_cstr()
        {
            return "@BUILD_DATE@";
        }

        /**
         * \brief Gets the build date of this library as a std::string.
         * \return Returns a std::string containing the build date of this library.
         */
        std::string build_date()
        {
            return build_date_cstr();
        }

        /**
         * \brief Gets the build os version of this library as a const char pointer.
         * \return Returns a const char pointer to build os version of this library.
         */
        const char *build_os_version_cstr()
        {
            return "@CMAKE_SYSTEM_VERSION@";
        }

        /**
         * \brief Gets the build os version of this library as a std::string.
         * \return Returns a std::string containing the os version of this library.
         */
        std::string build_os_version()
        {
            return build_os_version_cstr();
        }

        /**
         * \brief Gets the build os name of this library as a const char pointer.
         * \return Returns a const char pointer to build os name of this library.
         */
        const char *build_os_name_cstr()
        {
            return "@CMAKE_SYSTEM_NAME@";
        }

        /**
         * \brief Gets the build os name of this library as a std::string.
         * \return Returns a std::string containing the build os name of this library.
         */
        std::string build_os_name()
        {
            return build_os_name_cstr();
        }


        /**
         * \brief Gets the build os cpu of this library as a const char pointer.
         * \return Returns a const char pointer to build os cpu of this library.
         */
        const char *build_os_cpu_cstr()
        {
            return "@CMAKE_SYSTEM_PROCESSOR@";
        }

        /**
         * \brief Gets the build os cpu of this library as a std::string.
         * \return Returns a std::string containing the build os cpu of this library.
         */
        std::string build_os_cpu()
        {
            return build_os_cpu_cstr();
        }

        /**
         * \brief Gets the build type of this library as a const char pointer.
         * \return Returns a const char pointer to build type of this library.
         */
        const char *build_type_cstr()
        {
            return "@CMAKE_BUILD_TYPE@";
        }

        /**
         * \brief Gets the build type of this library as a std::string.
         * \return Returns a std::string containing the build type of this library.
         */
        const std::string build_type()
        {
            return build_type_cstr();
        }

        /**
         * \brief Gets the build cxx compiler id of this library as a const char pointer.
         * \return Returns a const char pointer to build cxx compiler id of this library.
         */
        const char *build_cxxcompiler_id_cstr()
        {
            return "@CMAKE_CXX_COMPILER_ID@";
        }

        /**
         * \brief Gets the build cxx compiler id of this library as a std::string.
         * \return Returns a std::string containing the build cxx compiler id of this library.
         */
        std::string build_cxxcompiler_id()
        {
            return build_cxxcompiler_id_cstr();
        }

        /**
         * \brief Gets the build cxx compiler version of this library as a const char pointer.
         * \return Returns a const char pointer to build cxx compiler version of this library.
         */
        const char *build_cxxcompiler_version_cstr()
        {
            return "@CMAKE_CXX_COMPILER_VERSION@";
        }

        /**
         * @brief Gets the build cxx compiler version of this library as a std::string.
         * @return Returns a std::string containing the build cxx compiler version of this library.
         */
        std::string build_cxxcompiler_version()
        {
            return build_cxxcompiler_version_cstr();
        }

        /**
         * \brief Gets the build cmake version of this library as a const char pointer.
         * \return Returns a const char pointer to the build cmake version of this library.
         */
        const char *build_cmake_version_cstr()
        {
            return "@CMAKE_VERSION@";
        }

        /**
         * \brief Gets the build cmake version of this library as a std::string.
         * \return Returns a std::string containing the build cmake version of this library.
         */
        std::string build_cmake_version()
        {
            return build_cmake_version_cstr();
        }

        /**
         * \brief Gets the build cmake generator of this library as a const char pointer.
         * \return Returns a const char pointer to the build cmake generator of this library.
         */
        const char *build_cmake_generator_cstr()
        {
            return "@CMAKE_GENERATOR@";
        }

        /**
         * \brief Gets the build cmake generator of this library as a std::string.
         * \return Returns a std::string containing the build cmake generator of this library.
         */
        std::string build_cmake_generator()
        {
            return build_cmake_generator_cstr();
        }

        /**
         * \brief Gets the version of this library as a const char pointer.
         *
         * The version format adheres CMAKE semantics.
         *
         * https://cmake.org/cmake/help/v3.0/variable/CMAKE_VERSION.html
         *
         * \return Returns a const char pointer to version of this library.
         */
        const char* version_cstr()
        {
            return "@PROJECT_VERSION@";
        }

        /**
         * \brief Gets the version of this library as a std::string.
         *
         * The version format adheres CMAKE semantics.
         *
         * https://cmake.org/cmake/help/v3.0/variable/CMAKE_VERSION.html
         *
         * \return Returns a std::string pointer to version of this library.
         */
        std::string version()
        {
            return version_cstr();
        }

        /**
         * \brief Gets the major version component as int.
         * \return Returns the major version component as int.
         */
        int version_major()
        {
            return @PROJECT_VERSION_MAJOR@;
        }

        /**
         * \brief Gets the minor version component as int.
         * \return Returns the minor version component as int.
         */
        int version_minor()
        {
            return @PROJECT_VERSION_MINOR@;
        }

        /**
         * \brief Gets the patch version component as int.
         * \return Returns the patch version component as int.
         */
        int version_patch()
        {
            return @PROJECT_VERSION_PATCH@;
        }

        /**
         * \brief Gets the tweak version component as int.
         * \return Returns the tweak version component as int.
         */
        int version_tweak()
        {
            return @PROJECT_VERSION_TWEAK@;
        }

        /**
         * \brief Gets the full name of this library as a const char pointer.
         * \return Returns a const char pointer to the full name of this library.
         */
        const char* fullname_cstr()
        {
            return "@PROJECT_NAME@ @PROJECT_VERSION@-@BUILD_DATE@-@BUILD_QUALITY@-@CMAKE_BUILD_TYPE@ @CMAKE_SYSTEM_NAME@-@CMAKE_SYSTEM_VERSION@-@CMAKE_SYSTEM_PROCESSOR@ @CMAKE_CXX_COMPILER_ID@-@CMAKE_CXX_COMPILER_VERSION@ @CMAKE_VERSION@-@CMAKE_GENERATOR@";
        }

        /**
         * \brief Gets the full name of this library as a std::string.
         * \return Returns a std::string containing the full name of this library.
         */
        std::string fullname()
        {
            return fullname_cstr();
        }
    }
}

#endif // COLL_VERSION_VERSION_HXX
